function [outSummary] = DelaySimAnalysis( basic, advanced, simout )
%DelaySimAnalysis: Takes output +/- structure generated by DelaySimComputer
%and computes statistical outputs, for the delay sequential sampling project 
%of Martin, Paolo and Steve. 
%
% Typically this function will not be caled directly, but will be called
% via DelaySimOverview().
%
% The output is based on vectors of the following simout structure.
% These vectors is of lenth advanced.simFreqDeltaVec. 
%
% On output, creates a new simstruct structure which can be put into a mat
% structure for the analysis. The simstruct contains the following fields
%   simout.ENumSeen = outtime(:);           % mean num patient pairs seen until stopping with sequential stopping boundaries
%   simout.RealizedMean = meanvec(:);           % realized valud of mean ('true' mean of sample path)
%   simout.DecisionMean = decisionmean(:);      % posterior mean at decision
%   simout.RealizedReward = freqreward;     % total true reward assuming stopping with stopping time
%   simout.ExpectedReward = postreward;     % total expected reward asuming stopping with stopping time
%   simout.PrHitTop = abovetop;     % vector of indicators: did upper stopping boundary get crossed (false if bottom crossed)
%   simout.PrHitBot = belowbot;     % vector of indicators: did upper stopping boundary get crossed (false if bottom crossed)
%   simout.PrNewSelected = picknew;           % vector of indicators: true if new alternative was selected
%   simout.PrReversal = (picknew == picknewhit);           % vector of indicators: true if new alternative would be selected if selection were made at time of stopping (before waiting for pipeline data)
%   simout.PrTrueBestSelected = (newtruebest == picknew);           % vector of indicators: true if true best was selected
% Data when all Tmax samples are observed
%   simout.DecisionMeanAll = postmean(end,:)';  % posterior mean at TMax
%   simout.RealizedRewardAll = freqreward2; % total realized reward assuming stopping at TMax
%   simout.ExpectedRewardAll = postreward2; %  total expected reward assuming stopping at TMax
%   simout.PrNewSelectedAll = picknew2;           % vector of indicators: true if new alternative was selected if all TMax samples viewed
%   simout.PrTrueBestSelectedAll = (newtruebest == picknew2); % vector of indicators: true if true best was selected if all TMax samples viewed
% Data for 'trial' and for 'fixed' variations
%   simout.DecisionMeanTrial = trialpostmean(:); % posterior mean for 'trial'
%   simout.RealizedRewardTrial = freqreward3;  % actual reward for 'trial'
%   simout.PrTrueBestSelectedTrial = (newtruebest == picknew3); % vector of indicators: true if true best was selected if sample sixe equals basic.numpairs
%   simout.DecisionMeanFixed = fixedpostmean (:);  % PAOLO
%   simout.RealizedRewardFixed = freqreward4;  % PAOLO
%   simout.PrTrueBestSelectedFixed = (newtruebest == picknew4); % vector of indicators: true if true best was selected if sample size equals optimal fixed sample size
% Data is kept for the following, but statistics are not computed, as
% statistics computed over replicatins would not make sense for this data.
% By default, if the field begins with 'NoStats', no statistics will be computed for that data.
%	simout.NoStatsBoundTvec = samppathtvec(:);           % realized valud of mean ('true' mean of sample path)
%	simout.NoStatsSomePostMean = postmean(:,1:min(10,NREPS));
%	simout.NoStatsOptSFormMu0 = OptSFormMu0;
%	simout.NoStatsOpt_fix4 = Opt_fix4;
%
% 2014 04 27: Created by Steve
% 2015 03 21: updated documentation, enabled data to be collected without
% statistics over replications needed computation (prefix NoStats in field
% name), ...

    NumDelValues = length(advanced.simFreqDeltaVec);
    NREPS = advanced.simNumReps;                % number of replications to run

% For each value of simFreqDeltaVec, compute statistics and put them into a
% vector so they can be readily computed.

% Preallocate a structure for all of the simulation data, based on creating
% fields whose names end with Ave and SE (for sample mean and standard
% error in estimate of the mean) and start with the field name for any data
% collected in the simout structure which contains data by for each replication.
    fields=fieldnames(simout(1));
    for i=1:numel(fields)
        [a, ~] = size(simout(1).(fields{i}));
        IgnoreStat = strfind( fields{i}, 'NoStats' );
        if (a > 1) && isempty(IgnoreStat)
            outSummary.(strcat(fields{i},'Ave')) = zeros(size(advanced.simFreqDeltaVec));
            outSummary.(strcat(fields{i},'SE')) = zeros(size(advanced.simFreqDeltaVec));
        end
    end

    % Now that structures have been allocated, populate the structures with the
    % appropriate statistics.
    for j=1:NumDelValues
        for i=1:numel(fields)
            [a, ~] = size(simout(1).(fields{i}));
            IgnoreStat = strfind( fields{i}, 'NoStats' );
            if (a > 1) && isempty(IgnoreStat)
                outSummary.(strcat(fields{i},'Ave'))(j) = mean(simout(j).(fields{i}));
                outSummary.(strcat(fields{i},'SE'))(j) = std(simout(j).(fields{i}))/sqrt(NREPS);
    %            outFreq.(strcat(fields{i},'Ave'))(j) = mean(mat.simFreqOut(j).(fields{i}));
    %            outFreq.(strcat(fields{i},'SE'))(j) = std(mat.simFreqOut(j).(fields{i}))/sqrt(NREPS);
            end
        end
    end

end

